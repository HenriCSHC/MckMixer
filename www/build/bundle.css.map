{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../gui/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n\n  export let name;\n\n  let port = 9001;\n  let socket = undefined;\n  let socketConnected = false;\n  let gain = 0.0;\n  let data = undefined;\n\n  function SendValue(_idx, _section, _type, _val) {\n    let _data = JSON.parse(JSON.stringify(data));\n    if (_section == \"channels\") {\n    _data.channels[_idx][_type] = _val;\n    } else if (_section == \"master\") {\n      _data[_type] = _val;\n    } else if (_section == \"reverb\") {\n      _data.reverb[_type] = _val;\n    }\n    let _msg = {\n      msgType: \"partial\",\n      section: \"config\",\n      data: JSON.stringify(_data)\n    };\n    if (socketConnected) {\n      socket.send(JSON.stringify(_msg));\n    } else {\n      Connect(\"ws://127.0.0.1\", port);\n      socket.send(JSON.stringify(_msg));\n    }\n  }\n  function RecvMsg(_msg) {\n    let _tmp = JSON.parse(_msg);\n    if (_tmp.msgType == \"partial\" && _tmp.section == \"config\") {\n      let _data = JSON.parse(_tmp.data);\n      data = _data;\n      console.log(\"[NEW DATA]\", data);\n    }\n  }\n\n  function Connect(_url, _port) {\n    let _uri = `${_url}:${_port}`;\n    console.log(_uri);\n    socket = new WebSocket(_uri);\n    socket.onopen = _evt => {\n      console.log(\"WS was opened!\");\n      socketConnected = true;\n    };\n    socket.onclose = _evt => {\n      console.log(\"WS was closed!\");\n      socketConnected = false;\n    };\n    socket.onmessage = _evt => RecvMsg(_evt.data);\n  }\n  onMount(() => {\n    Connect(\"ws://127.0.0.1\", port);\n  });\n  onDestroy(() => {\n    if (socketConnected) {\n      socket.close();\n    }\n  });\n\n  function AddChannel(_isStereo) {\n    let _msg = {\n      msgType: \"command\",\n      section: \"channel\",\n      data: JSON.stringify({\n        command: \"add\",\n        isStereo: _isStereo,\n        idx: 0\n      })\n    };\n    if (socketConnected) {\n      socket.send(JSON.stringify(_msg));\n    }\n  }\n</script>\n\n<style>\n  .channel {\n    padding: 16px;\n    display: grid;\n    grid-template-columns: 25px 1fr 50px 2fr;\n  }\n</style>\n\n<main>\n  {#if data != undefined}\n      <div class=\"channel\">\n        <i></i>\n        <span>Master</span>\n        <span>{data.gain} dB</span>\n        <input\n          type=\"range\"\n          value={Math.round(data.gain).toString()}\n          min=\"-60\"\n          max=\"6\"\n          on:change={e => SendValue(undefined, 'master', 'gain', Number(e.target.value))} />\n      </div>\n      <div class=\"channel\">\n        <i></i>\n        <span>Master</span>\n        <span>{data.reverb.rt60} s</span>\n        <input\n          type=\"range\"\n          value={Math.round(data.reverb * 10.0).toString()}\n          min=\"5.0\"\n          max=\"100.0\"\n          on:change={e => SendValue(undefined, 'reverb', 'rt60', Number(e.target.value) / 10.0)} />\n      </div>\n\n\n    {#each data.channels as chan, i}\n      <div class=\"channel\">\n        <i>#{i + 1}</i>\n        <span>{chan.name}</span>\n        <span>{chan.gain} dB</span>\n        <input\n          type=\"range\"\n          value={Math.round(chan.gain).toString()}\n          min=\"-60\"\n          max=\"6\"\n          on:change={e => SendValue(i, 'channels', 'gain', Number(e.target.value))} />\n      </div>\n      <div class=\"channel\">\n        <i></i>\n        <span>Pan</span>\n        <span>{chan.pan} %</span>\n        <input\n          type=\"range\"\n          value={Math.round(chan.pan).toString()}\n          min=\"0\"\n          max=\"100\"\n          on:change={e => SendValue(i, 'channels', 'pan', Number(e.target.value))} />\n      </div>\n      <div class=\"channel\">\n        <i></i>\n        <span>Reverb Send</span>\n        <span>{chan.send} dB</span>\n        <input\n          type=\"range\"\n          value={Math.round(chan.send).toString()}\n          min=\"-60\"\n          max=\"20\"\n          on:change={e => SendValue(i, 'channels', 'send', Number(e.target.value))} />\n      </div>\n    {/each}\n    <button type=\"button\" on:click={() => AddChannel(false)}>\n      Add new mono channel\n    </button>\n    <button type=\"button\" on:click={() => AddChannel(true)}>\n      Add new stereo channel\n    </button>\n  {/if}\n</main>\n"
  ],
  "names": [],
  "mappings": "AAiFE,QAAQ,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,AAC1C,CAAC"
}