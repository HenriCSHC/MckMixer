{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../gui/App.svelte",
    "../../gui/Channel.svelte",
    "../../gui/DelaySend.svelte",
    "../../gui/ReverbSend.svelte",
    "../../gui/Settings.svelte",
    "../../gui/Slider.svelte",
    "../../gui/SliderLabel.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n  import { DbToLog, LogToDb } from \"./Tools.svelte\";\n  import Settings from \"./Settings.svelte\";\n  import Slider from \"./Slider.svelte\";\n  import SliderLabel from \"./SliderLabel.svelte\";\n  import Channel from \"./Channel.svelte\";\n  import ReverbSend from \"./ReverbSend.svelte\";\n  import DelaySend from \"./DelaySend.svelte\";\n\n  export let name;\n\n  let port = 9001;\n  let socket = undefined;\n  let socketConnected = false;\n  let gain = 0.0;\n  let data = undefined;\n\n  let revTypes = [\"STREV\", \"PROG2\", \"ZREV2\", \"NREVB\"];\n\n  function SendValue(_idx, _section, _type, _val) {\n    let _data = JSON.parse(JSON.stringify(data));\n    if (_section == \"channels\") {\n      _data.channels[_idx][_type] = _val;\n    } else if (_section == \"master\") {\n      _data[_type] = _val;\n    } else if (_section == \"reverb\") {\n      _data.reverb[_type] = _val;\n    } else if (_section == \"delay\") {\n      _data.delay[_type] = _val;\n    }\n    let _msg = {\n      msgType: \"partial\",\n      section: \"config\",\n      data: JSON.stringify(_data)\n    };\n    if (socketConnected) {\n      socket.send(JSON.stringify(_msg));\n    } else {\n      Connect(\"ws://127.0.0.1\", port);\n      socket.send(JSON.stringify(_msg));\n    }\n  }\n  function RecvMsg(_msg) {\n    let _tmp = JSON.parse(_msg);\n    if (_tmp.msgType == \"partial\" && _tmp.section == \"config\") {\n      let _data = JSON.parse(_tmp.data);\n      data = _data;\n      console.log(\"[NEW DATA]\", data);\n    }\n  }\n\n  function SendMsg(_msgType, _section, _data) {\n    let _msg = {\n      msgType: _msgType,\n      section: _section,\n      data: _data\n    };\n    if (socketConnected) {\n      socket.send(JSON.stringify(_msg));\n    }\n  }\n\n  function Connect(_url, _port) {\n    let _uri = `${_url}:${_port}`;\n    console.log(_uri);\n    socket = new WebSocket(_uri);\n    socket.onopen = _evt => {\n      console.log(\"WS was opened!\");\n      socketConnected = true;\n    };\n    socket.onclose = _evt => {\n      console.log(\"WS was closed!\");\n      socketConnected = false;\n    };\n    socket.onmessage = _evt => RecvMsg(_evt.data);\n  }\n  onMount(() => {\n    let _uri = document.URL;\n    let _url = _uri.substring(_uri.indexOf(\"://\") + 3, _uri.lastIndexOf(\":\"));\n    Connect(\"ws://\" + _url, port);\n  });\n  onDestroy(() => {\n    if (socketConnected) {\n      socket.close();\n    }\n  });\n\n  function AddChannel(_isStereo) {\n    let _msg = {\n      msgType: \"command\",\n      section: \"channel\",\n      data: JSON.stringify({\n        command: \"add\",\n        isStereo: _isStereo,\n        idx: 0\n      })\n    };\n    if (socketConnected) {\n      socket.send(JSON.stringify(_msg));\n    }\n  }\n</script>\n\n<style>\n  .base {\n    width: 100%;\n    height: 100%;\n    display: grid;\n    grid-template-columns: auto 1fr auto auto;\n    grid-row-gap: 1px;\n    grid-column-gap: 1px;\n    background-color: #333;\n  }\n  .settings {\n    grid-column: 1/2;\n    overflow-y: auto;\n    padding: 8px;\n    background-color: #f0f0f0;\n  }\n  .channels {\n    grid-column: 2/3;\n    padding: 8px;\n    height: calc(100% - 16px);\n    width: calc(100% - 16px);\n    background-color: #f0f0f0;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n    /*\n    grid-auto-columns: min-content;\n    grid-auto-flow: column;*/\n    grid-gap: 8px;\n  }\n  .sends {\n    grid-column: -3/-2;\n    padding: 8px;\n    height: calc(100% - 16px);\n    width: calc(100% - 16px);\n    background-color: #f0f0f0;\n    display: grid;\n    grid-template-columns: 140px;\n    grid-template-rows: 1fr 1fr;\n    grid-gap: 8px;\n  }\n  .master {\n    grid-column: -2/-1;\n    padding: 8px;\n    background-color: #f0f0f0;\n  }\n</style>\n\n<div class=\"base\">\n  {#if data != undefined}\n    <div class=\"settings\">\n      <Settings {data} {SendValue} {SendMsg} />\n    </div>\n    <div class=\"channels\">\n      {#each data.channels as chan, i}\n        <Channel\n          index={i}\n          data={chan}\n          SendValue={(t, v) => SendValue(i, 'channels', t, v)} />\n      {/each}\n    </div>\n    <div class=\"sends\">\n      <ReverbSend\n        index={0}\n        data={data.reverb}\n        SendValue={(t, v) => SendValue(null, 'reverb', t, v)} />\n      <DelaySend\n        index={1}\n        data={data.delay}\n        SendValue={(t, v) => SendValue(null, 'delay', t, v)} />\n    </div>\n    <div class=\"master\">\n      {#if data != undefined}\n        <Slider\n          vertical={true}\n          value={DbToLog(data.gain)}\n          Handler={_v => SendValue(undefined, 'master', 'gain', LogToDb(_v))} />\n      {/if}\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import SliderLabel from \"./SliderLabel.svelte\";\n  import Slider from \"./Slider.svelte\";\n  import { DbToLog, LogToDb, FormatPan } from \"./Tools.svelte\";\n\n  export let data = undefined;\n  export let SendValue = undefined;\n  export let index = 0;\n</script>\n\n<style>\n  .base {\n    background-color: #e0e0e0;\n    padding: 4px;\n    width: calc(100% - 8px);\n    height: calc(100% - 8px);\n    display: grid;\n    grid-auto-rows: minmax(min-content, max-content);\n    grid-gap: 4px;\n    border-radius: 2px;\n  }\n\n  .base > i,\n  .base > span {\n    text-align: center;\n    font-family: mck-lato;\n    font-size: 14px;\n  }\n\n  .control {\n    display: grid;\n    grid-template-rows: auto 24px;\n    grid-row-gap: 2px;\n    row-gap: 2px;\n    font-size: 14px;\n  }\n  .rest {\n    height: 43px;\n  }\n</style>\n\n<div class=\"base\">\n  <i>{index + 1}</i>\n  <span>{data.name}</span>\n  <div class=\"control\">\n    <i>Pan:</i>\n    <SliderLabel\n        centered={true}\n      label={FormatPan(data.pan)}\n      value={data.pan / 100.0}\n      Handler={_v => SendValue('pan', _v * 100.0)} />\n  </div>\n  <div class=\"control\">\n    <i>Reverb Send:</i>\n    <SliderLabel\n      label={Math.round(data.sendReverb) + ' dB'}\n      value={DbToLog(data.sendReverb)}\n      Handler={_v => SendValue('sendReverb', LogToDb(_v))} />\n  </div>\n  <div class=\"control\">\n    <i>Delay Send:</i>\n    <SliderLabel\n      label={Math.round(data.sendDelay) + ' dB'}\n      value={DbToLog(data.sendDelay)}\n      Handler={_v => SendValue('sendDelay', LogToDb(_v))} />\n  </div>\n  <div class=\"rest\"/>\n  <div class=\"control\">\n    <i>Gain:</i>\n    <SliderLabel\n      label={Math.round(data.gain) + ' dB'}\n      value={DbToLog(data.gain)}\n      Handler={_v => SendValue('gain', LogToDb(_v))} />\n  </div>\n</div>\n",
    "<script>\n  import SliderLabel from \"./SliderLabel.svelte\";\n  import Slider from \"./Slider.svelte\";\n  import { DbToLog, LogToDb, FormatPan } from \"./Tools.svelte\";\n\n  export let data = undefined;\n  export let SendValue = undefined;\n  export let index = 0;\n\n  let types = [\"Digital\", \"Analog\", \"Ping Pong\"];\n</script>\n\n<style>\n  .base {\n    background-color: #00ccff;\n    padding: 4px;\n    width: calc(100% - 8px);\n    height: calc(100% - 8px);\n    display: grid;\n    grid-auto-rows: minmax(min-content, max-content);\n    grid-gap: 4px;\n    border-radius: 2px;\n  }\n\n  .base > i,\n  .base > span {\n    text-align: center;\n    font-family: mck-lato;\n    font-size: 14px;\n  }\n\n  .control {\n    display: grid;\n    grid-template-rows: auto 24px;\n    grid-row-gap: 2px;\n    row-gap: 2px;\n    font-size: 14px;\n  }\n\n  select {\n    height: 24px;\n    padding: 0px;\n    color: #222;\n    background-color: #f0f0f0;\n    font-family: mck-lato;\n    font-size: 14px;\n    text-align: center;\n    border: 1px solid #222;\n    border-radius: 2px;\n    cursor: pointer;\n  }\n  .rest {\n    height: 43px;\n  }\n</style>\n\n<div class=\"base\">\n  <i>FX {index + 1}</i>\n  <span>Delay</span>\n  <div class=\"control\">\n    <i>Type:</i>\n    <select\n      value={data.type}\n      on:change={_e => {\n        SendValue('type', Number(_e.target.value));\n        _e.target.selectedIndex = 0;\n      }}>\n      <option style=\"display: none\" selected>{types[data.type]}</option>\n      {#each types as type, i}\n        <option value={i}>{type}</option>\n      {/each}\n    </select>\n  </div>\n  <div class=\"control\">\n    <i>Delay:</i>\n    <SliderLabel\n      label={(Math.round(data.delay * 100.0) / 100.0).toFixed(2) + \" s\"}\n      value={(data.delay - 0.1) / (5.0 - 0.1)}\n      Handler={_v => SendValue('delay', 0.1 + _v * (5.0 - 0.1))} />\n  </div>\n  <div class=\"control\">\n    <i>Feedback:</i>\n    <SliderLabel\n      label={Math.round(data.feedback) + ' dB'}\n      value={DbToLog(data.feedback)}\n      Handler={_v => SendValue('feedback', LogToDb(_v))} />\n  </div>\n  <div class=\"rest\"/>\n  <div class=\"control\">\n    <i>Gain:</i>\n    <SliderLabel\n      label={Math.round(data.gain) + ' dB'}\n      value={DbToLog(data.gain)}\n      Handler={_v => SendValue('gain', LogToDb(_v))} />\n  </div>\n</div>\n",
    "<script>\n  import SliderLabel from \"./SliderLabel.svelte\";\n  import Slider from \"./Slider.svelte\";\n  import { DbToLog, LogToDb, FormatPan } from \"./Tools.svelte\";\n\n  export let data = undefined;\n  export let SendValue = undefined;\n  export let index = 0;\n\n  let types = [\"ST Rev\", \"Prog\", \"Z Rev\", \"N Rev\"];\n</script>\n\n<style>\n  .base {\n    background-color: #4dd100;\n    padding: 4px;\n    width: calc(100% - 8px);\n    height: calc(100% - 8px);\n    display: grid;\n    grid-auto-rows: minmax(min-content, max-content);\n    grid-gap: 4px;\n    border-radius: 2px;\n  }\n\n  .base > i,\n  .base > span {\n    text-align: center;\n    font-family: mck-lato;\n    font-size: 14px;\n  }\n\n  .control {\n    display: grid;\n    grid-template-rows: auto 24px;\n    grid-row-gap: 2px;\n    row-gap: 2px;\n    font-size: 14px;\n  }\n\n  select {\n    height: 24px;\n    padding: 0px;\n    color: #222;\n    background-color: #f0f0f0;\n    font-family: mck-lato;\n    font-size: 14px;\n    text-align: center;\n    border: 1px solid #222;\n    border-radius: 2px;\n    cursor: pointer;\n  }\n\n  .rest {\n    height: 43px;\n  }\n</style>\n\n<div class=\"base\">\n  <i>FX {index + 1}</i>\n  <span>Reverb</span>\n  <div class=\"control\">\n    <i>Type:</i>\n    <select\n      value={data.type}\n      on:change={_e => {\n        SendValue('type', Number(_e.target.value));\n        _e.target.selectedIndex = 0;\n      }}>\n      <option style=\"display: none\" selected>{types[data.type]}</option>\n      {#each types as type, i}\n        <option value={i}>{type}</option>\n      {/each}\n    </select>\n  </div>\n  <div class=\"control\">\n    <i>RT60:</i>\n    <SliderLabel\n      label={(Math.round(data.rt60 * 100.0) / 100.0).toFixed(2) + \" s\"}\n      value={(data.rt60 - 0.1) / (5.0 - 0.1)}\n      Handler={_v => SendValue('rt60', 0.1 + _v * (5.0 - 0.1))} />\n  </div>\n  <div class=\"rest\"/>\n  <div class=\"rest\"/>\n  <div class=\"control\">\n    <i>Gain:</i>\n    <SliderLabel\n      label={Math.round(data.gain) + ' dB'}\n      value={DbToLog(data.gain)}\n      Handler={_v => SendValue('gain', LogToDb(_v))} />\n  </div>\n</div>\n",
    "<script>\n    import SliderLabel from \"./SliderLabel.svelte\";\n\n    export let data = undefined;\n    export let SendValue = undefined;\n    export let SendMsg = undefined;\n\n\n  function AddChannel(_isStereo) {\n    let _data = JSON.stringify({\n        command: \"add\",\n        isStereo: _isStereo,\n        idx: 0\n      });\n\n    if (SendMsg) {\n        SendMsg(\"command\", \"channel\", _data);\n    }\n  }\n</script>\n\n<style>\n    .base {\n        display: grid;\n        grid-auto-rows: auto;\n        grid-template-columns: 50px 1fr;\n        width: 160px;\n    }\n</style>\n\n<div class=\"base\">\n    <span>Add:</span>\n    <button type=\"button\" on:click={()=>AddChannel(false)}>Mono</button>\n    <span/>\n    <button type=\"button\" on:click={()=>AddChannel(true)}>Stereo</button>\n</div>",
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n  import { GetOffsetLeft, GetOffsetTop } from \"./Tools.svelte\";\n\n  export let vertical = false;\n  export let Handler = undefined;\n  export let value = 0.0;\n\n  let curValue = -1.0;\n  let curWidth = 100.0;\n  let curHeight = 100.0;\n  let base = undefined;\n\n  let offset = 0.0;\n  let mouse = 0.0;\n  let elemWidth = 0.0;\n  let elemHeight = 0.0;\n  let isDragging = false;\n\n  $: if (value != curValue) {\n    curValue = Math.max(0.0, Math.min(1.0, value));\n    if (vertical) {\n      curHeight = Math.round(curValue * 100.0);\n    } else {\n      curWidth = Math.round(curValue * 100.0);\n    }\n    //slider.style.width = `${Math.round(curValue * 100.0)}$`;\n  }\n\n  function TouchHandler(_evt) {\n        console.log(\"[TOUCH]\", _evt);\n    if (_evt.type == \"touchstart\") {\n      if (base) {\n        isDragging = true;\n        elemWidth = base.offsetWidth;\n        elemHeight = base.offsetHeight;\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.touches[0].clientY - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.touches[0].clientX - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n        //_evt.preventDefault();\n      }\n    } else if (_evt.type == \"touchmove\") {\n      if (isDragging) {\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.touches[0].clientY - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.touches[0].clientX - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n\n        _evt.stopImmediatePropagation();\n      }\n    } else if (_evt.type == \"touchend\") {\n      if (isDragging) {\n        isDragging = false;\n        //_evt.preventDefault();\n      }\n    }\n  }\n\n  function MouseHandler(_evt) {\n    if (_evt.type == \"mousedown\") {\n      if (base) {\n        isDragging = true;\n        elemWidth = base.offsetWidth;\n        elemHeight = base.offsetHeight;\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.y - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.x - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n        _evt.preventDefault();\n      }\n    } else if (_evt.type == \"mousemove\") {\n      if (isDragging) {\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.y - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.x - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n\n        _evt.preventDefault();\n      }\n    } else if (_evt.type == \"mouseup\") {\n      if (isDragging) {\n        isDragging = false;\n        _evt.preventDefault();\n      }\n    }\n  }\n\n  onMount(() => {\n      window.addEventListener(\"contextmenu\", e => e.preventDefault());\n    document.addEventListener(\"mousemove\", MouseHandler);\n    document.addEventListener(\"mouseup\", MouseHandler);\n    document.addEventListener(\"touchmove\", TouchHandler);\n    document.addEventListener(\"touchend\", TouchHandler);\n  });\n\n  onDestroy(() => {\n    document.removeEventListener(\"mousemove\", MouseHandler);\n    document.removeEventListener(\"mouseup\", MouseHandler);\n    document.removeEventListener(\"touchmove\", TouchHandler);\n    document.removeEventListener(\"touchend\", TouchHandler);\n  });\n</script>\n\n<style>\n  .base {\n    width: calc(100% - 2px);\n    height: calc(100% - 2px);\n    border: 1px solid #222;\n    border-radius: 2px;\n    cursor: pointer;\n  }\n\n  .slider.hori {\n    min-height: 20px;\n    height: 100%;\n    width: 50%;\n    background-image: linear-gradient(90deg, #666, #222);\n  }\n  .slider.vert {\n    min-width: 20px;\n    position: relative;\n    top: 50%;\n    height: 50%;\n    width: 100%;\n    background-image: linear-gradient(0deg, #666, #222);\n  }\n  .slider {\n      z-index: 4;\n      position: absolute;\n      background-image: none;\n      background: #f005;\n  }\n  span {\n      position: absolute;\n  }\n</style>\n\n<div class=\"base\" bind:this={base} on:mousedown={MouseHandler} on:touchstart={TouchHandler}>\n  {#if vertical}\n    <div\n      class=\"slider vert\"\n      style=\"top: {100 - curHeight}%; height: {curHeight}%\" />\n  {:else}\n    <div class=\"slider hori\" style=\"width: {curWidth}%;\" />\n    <span>{curWidth}</span>\n  {/if}\n</div>\n",
    "<script>\n  import { onMount, onDestroy } from \"svelte\";\n  import { GetOffsetLeft, GetOffsetTop } from \"./Tools.svelte\";\n\n  export let vertical = false;\n  export let Handler = undefined;\n  export let value = 0.0;\n  export let label = \"\";\n  export let centered = false;\n\n  let curValue = -1.0;\n  let curWidth = 100.0;\n  let curHeight = 100.0;\n  let base = undefined;\n\n  let offset = 0.0;\n  let mouse = 0.0;\n  let elemWidth = 0.0;\n  let elemHeight = 0.0;\n  let isDragging = false;\n\n  $: if (value != curValue) {\n    curValue = Math.max(0.0, Math.min(1.0, value));\n    if (vertical) {\n      curHeight = Math.round(curValue * 100.0);\n    } else {\n      curWidth = Math.round(curValue * 100.0);\n    }\n    //slider.style.width = `${Math.round(curValue * 100.0)}$`;\n  }\n\n  function TouchHandler(_evt) {\n    console.log(\"[TOUCH]\", _evt);\n    if (_evt.type == \"touchstart\") {\n      if (base) {\n        isDragging = true;\n        //elemWidth = base.offsetWidth;\n        //elemHeight = base.offsetHeight;\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 -\n            Math.max(\n              0.0,\n              Math.min(1.0, (_evt.touches[0].clientY - offset) / elemHeight)\n            );\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(\n            0.0,\n            Math.min(1.0, (_evt.touches[0].clientX - offset) / elemWidth)\n          );\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n        //_evt.preventDefault();\n      }\n    } else if (_evt.type == \"touchmove\") {\n      if (isDragging) {\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 -\n            Math.max(\n              0.0,\n              Math.min(1.0, (_evt.touches[0].clientY - offset) / elemHeight)\n            );\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(\n            0.0,\n            Math.min(1.0, (_evt.touches[0].clientX - offset) / elemWidth)\n          );\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n\n        _evt.stopImmediatePropagation();\n      }\n    } else if (_evt.type == \"touchend\") {\n      if (isDragging) {\n        isDragging = false;\n        //_evt.preventDefault();\n      }\n    }\n  }\n\n  function MouseHandler(_evt) {\n    if (_evt.type == \"mousedown\") {\n      if (base) {\n        if (_evt.ctrlKey) {\n          if (centered) {\n            Handler(0.5);\n          } else {\n            Handler(1.0);\n          }\n          return;\n        }\n        isDragging = true;\n        //elemWidth = base.offsetWidth;\n        //elemHeight = base.offsetHeight;\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.y - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.x - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n        _evt.preventDefault();\n      }\n    } else if (_evt.type == \"mousemove\") {\n      if (isDragging) {\n        let _val = curValue;\n        if (vertical) {\n          offset = GetOffsetTop(base);\n          _val =\n            1.0 - Math.max(0.0, Math.min(1.0, (_evt.y - offset) / elemHeight));\n        } else {\n          offset = GetOffsetLeft(base);\n          _val = Math.max(0.0, Math.min(1.0, (_evt.x - offset) / elemWidth));\n        }\n        if (Handler) {\n          Handler(_val);\n        }\n\n        _evt.preventDefault();\n      }\n    } else if (_evt.type == \"mouseup\") {\n      if (isDragging) {\n        isDragging = false;\n        _evt.preventDefault();\n      }\n    }\n  }\n\n  onMount(() => {\n    window.addEventListener(\"contextmenu\", e => e.preventDefault());\n    document.addEventListener(\"mousemove\", MouseHandler);\n    document.addEventListener(\"mouseup\", MouseHandler);\n    document.addEventListener(\"touchmove\", TouchHandler);\n    document.addEventListener(\"touchend\", TouchHandler);\n  });\n\n  onDestroy(() => {\n    document.removeEventListener(\"mousemove\", MouseHandler);\n    document.removeEventListener(\"mouseup\", MouseHandler);\n    document.removeEventListener(\"touchmove\", TouchHandler);\n    document.removeEventListener(\"touchend\", TouchHandler);\n  });\n</script>\n\n<style>\n  .base {\n    width: calc(100% - 2px);\n    height: calc(100% - 2px);\n    border: 1px solid #222;\n    border-radius: 2px;\n    cursor: pointer;\n  }\n\n  .blend {\n    position: absolute;\n    height: 20px;\n  }\n\n  .bg {\n    background: #f0f0f0;\n    z-index: 1;\n  }\n  span {\n    color: #f0f0f0;\n    position: absolute;\n    z-index: 3;\n    mix-blend-mode: difference;\n    text-align: center;\n    font-size: 14px;\n    font-family: mck-lato;\n  }\n  .fg {\n    background-image: linear-gradient(90deg, #666, #222);\n    z-index: 4;\n    mix-blend-mode: screen;\n  }\n  .fg.centered {\n    background-image: linear-gradient(90deg, #666, #222, #666);\n  }\n\n  .slider.vert {\n    min-width: 20px;\n    position: relative;\n    top: 50%;\n    height: 50%;\n    width: 100%;\n    background-image: linear-gradient(0deg, #666, #222);\n  }\n  .slider.hori {\n    z-index: 2;\n    position: absolute;\n    background: black;\n  }\n</style>\n\n<div\n  class=\"base\"\n  bind:clientWidth={elemWidth}\n  bind:clientHeight={elemHeight}\n  bind:this={base}\n  on:mousedown={MouseHandler}\n  on:touchstart={TouchHandler}>\n  {#if vertical}\n    <div\n      class=\"slider vert\"\n      style=\"top: {100 - curHeight}%; height: {curHeight}%\" />\n  {:else}\n    <div\n      class=\"blend bg\"\n      style=\"width: {elemWidth}px; height: {elemHeight}px;\" />\n    {#if centered}\n      <div\n        class=\"blend slider hori\"\n        style=\"left: {curValue >= 0.5 ? '50%' : `${curValue * elemWidth}px`}; width: {Math.abs((curValue - 0.5) * elemWidth)}px; height: {elemHeight}px;\" />\n    {:else}\n      <div\n        class=\"blend slider hori\"\n        style=\"width: {curValue * elemWidth}px; height: {elemHeight}px;\" />\n    {/if}\n    <div\n      class=\"blend fg {centered ? 'centered' : ''}\"\n      style=\"width: {elemWidth}px; height: {elemHeight}px;\" />\n    <span\n      style=\"width: {elemWidth}px; height: {elemHeight}px; line-height: {elemHeight}px;\">\n      {label}\n    </span>\n    <div\n      class=\"blend border\"\n      style=\"width: {elemWidth}px; height: {elemHeight}px;\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}